apply plugin: 'com.android.application'

android {
    compileSdkVersion 26
    buildToolsVersion '26.0.2'

    def versionPropsFile = file('version.properties')
    def versionBuild
    def versionType

    /*Setting default value for versionBuild which is the last incremented value stored in the file */
    if (versionPropsFile.canRead()) {
        def Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionPropsFile))
        versionBuild = versionProps['VERSION_BUILD'].toInteger()
        versionType = versionProps['VERSION_VARIANT']
    } else {
        throw new FileNotFoundException("Could not read version.properties!")
    }

    /*Wrapping inside a method avoids auto incrementing on every gradle task run. Now it runs only when we build apk*/
    ext.autoIncrementBuildNumber = {

        if (versionPropsFile.canRead()) {
            def Properties versionProps = new Properties()
            versionProps.load(new FileInputStream(versionPropsFile))
            if (versionType.equals("beta")) {
                versionBuild = versionBuild + 1
            }
            versionProps['VERSION_BUILD'] = versionBuild.toString()
            versionProps.store(versionPropsFile.newWriter(), null)
        } else {
            throw new FileNotFoundException("Could not read version.properties!")
        }
    }
    defaultConfig {
        applicationId "kpchuck.k_klock"
        minSdkVersion 24
        targetSdkVersion 27
        versionCode versionBuild
        versionName "17"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            if (versionType.equals("beta")) {
                outputFileName = "K-Manager-v$versionName.$versionCode-beta.apk"
            } else if (versionType.equals("debug")) {
                outputFileName = "K-Manager-debug" + ".apk"
            } else if (versionType.equals("stable")) {
                outputFileName = "K-Manager-v$versionName" + ".apk"
                if (versionPropsFile.canRead()) {
                    def Properties versionProps = new Properties()
                    versionProps.load(new FileInputStream(versionPropsFile))
                    versionBuild = -1
                    versionProps['VERSION_BUILD'] = versionBuild.toString()
                    versionProps.store(versionPropsFile.newWriter(), null)
                } else {
                    throw new FileNotFoundException("Could not read version.properties!")
                }
            }


        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    // Hook to check if the release/debug task is among the tasks to be executed.
    //Let's make use of it
    gradle.taskGraph.whenReady { taskGraph ->
        if (taskGraph.hasTask(assembleDebug)) {  /* when run debug task */
            if (versionType.equals("beta")) {
                uploadBetaWhenFinished.execute()
            } else if (versionType.equals("debug")) {
                uploadDebugWhenFinished.execute()
            }
            autoIncrementBuildNumber()
        } else if (taskGraph.hasTask(assembleRelease)) { /* when run release task */
            autoIncrementBuildNumber()
        }
    }

}

dependencies {

    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    //Ziputils
    compile "org.zeroturnaround:zt-zip:${1.8}"
    //Commons io
    compile "commons-io:commons-io:${2.5}"
    //Loading Animation
    compile 'com.github.ybq:Android-SpinKit:1.1.0'
    //All those com.android.s
    compile 'com.android.support:design:26.+'
    compile 'com.android.support:appcompat-v7:26.1.0'
    compile 'com.android.support:support-v4:26.+'
    //Image Picker
    compile 'com.kbeanie:multipicker:1.1.31@aar'
    //Superuser
    compile 'eu.chainfire:libsuperuser:1.0.0.+'
    //Searchable Spinner
    compile 'gr.escsoft.michaelprimez.searchablespinner:SearchableSpinner:1.0.9'
    compile 'com.amulyakhare:com.amulyakhare.textdrawable:1.0.1'
    compile 'gr.escsoft.michaelprimez.revealedittext:RevealEditText:1.0.1'
    //Welcome Activity
    compile 'com.stephentuso:welcome:1.4.1'
    // Butterknife
    compile 'com.jakewharton:butterknife:8.8.1'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'
    // MaterialDrawer
    implementation("com.mikepenz:materialdrawer:6.0.2@aar") {
        transitive = true
    }

    //required support lib modules
    implementation 'com.android.support:recyclerview-v7:26.1.0'
    implementation 'com.android.support:support-annotations:26.1.0'
}
task uploadDebugWhenFinished {
    doLast {
        "python /home/karol/PycharmProjects/telegram/Debug.py".execute()
    }
}


task uploadBetaWhenFinished {
    doLast {
        "python /home/karol/PycharmProjects/telegram/Beta.py".execute()
    }
}
