apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: 'Constants.gradle'


android {
    compileSdkVersion 28
    buildToolsVersion '28.0.3'

    def versionPropsFile = file('version.properties')
    def versionBuild
    def versionType

    /*Setting default value for versionBuild which is the last incremented value stored in the file */
    if (versionPropsFile.canRead()) {
        Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionPropsFile))
        versionBuild = versionProps['VERSION_BUILD'].toInteger()
        versionType = versionProps['VERSION_VARIANT']
    } else {
        throw new FileNotFoundException("Could not read version.properties!")
    }

    /*Wrapping inside a method avoids auto incrementing on every gradle task run. Now it runs only when we build apk*/
    ext.autoIncrementBuildNumber = {

        if (versionPropsFile.canRead()) {
            Properties versionProps = new Properties()
            versionProps.load(new FileInputStream(versionPropsFile))
            if (versionType.equals("beta")) {
                versionBuild = versionBuild + 1
            }
            versionProps['VERSION_BUILD'] = versionBuild.toString()
            versionProps.store(versionPropsFile.newWriter(), null)
        } else {
            throw new FileNotFoundException("Could not read version.properties!")
        }
    }
    defaultConfig {
        applicationId "kpchuck.k_klock"
        minSdkVersion 24
        targetSdkVersion 29
        versionCode 44
        versionName "42"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        buildConfigField "String", "BASE_64_LICENSE_KEY", "\"" + BASE_64_LICENSE_KEY + "\""
        buildConfigField "String", "APK_SIGNATURE_PRODUCTION", "\"" + APK_SIGNATURE_PRODUCTION + "\""

    }
    signingConfigs {
        release {
            storeFile file("/home/przestrzelskicom/bin/kmanager_key.jks")
            if (!storeFile.canRead()){
                storeFile = file("/home/karol/Documents/kmanager_key.jks")
            }
            storePassword "Password.tar"
            keyAlias "key0"
            keyPassword "Password.tar"
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            if (versionType.equals("beta")) {
                outputFileName = "K-Manager-v$versionName.$versionBuild-beta.apk"
            } else if (versionType.equals("debug")) {
                outputFileName = "K-Manager-debug" + ".apk"
            } else if (versionType.equals("stable")) {
                outputFileName = "K-Manager-v$versionName" + ".apk"
                if (versionPropsFile.canRead()) {
                    Properties versionProps = new Properties()
                    versionProps.load(new FileInputStream(versionPropsFile))
                    versionBuild = 0
                    versionProps['VERSION_BUILD'] = versionBuild.toString()
                    versionProps.store(versionPropsFile.newWriter(), null)
                } else {
                    throw new FileNotFoundException("Could not read version.properties!")
                }
            }


        }
    }
    buildTypes {
        release {
            lintOptions {
                disable 'MissingTranslation'
                checkReleaseBuilds false
                abortOnError false
            }
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            signingConfig signingConfigs.release
        }
    }
    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    dexOptions {
        javaMaxHeapSize '2048m'
    }

    // Hook to check if the release/debug task is among the tasks to be executed.
    //Let's make use of it

    gradle.taskGraph.whenReady { taskGraph ->
        if (taskGraph.hasTask(assembleDebug)) {
            project.logger.debug('my debug message')

        } else if (taskGraph.hasTask(assembleRelease)) { /* when run release task */
            if (versionType.equals("beta")) {
                //  uploadBetaWhenFinished.execute()
            } else if (versionType.equals("debug")) {
                //  uploadDebugWhenFinished.execute()
            }
            autoIncrementBuildNumber()
        }
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
    }

}




dependencies {

    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.legacy:legacy-support-v13:1.0.0'

    androidTestImplementation('androidx.test.espresso:espresso-core:3.1.0-alpha4', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    //Ziputils
    implementation "org.zeroturnaround:zt-zip:${1.8}"
    //Commons io
    implementation 'commons-io:commons-io:2.5'
    //Loading Animation
    implementation 'com.github.ybq:Android-SpinKit:1.1.0'
    //All those com.android.s
    implementation 'com.google.android.material:material:1.0.0'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.annotation:annotation:1.1.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    // About libraries
    implementation "com.mikepenz:aboutlibraries:6.2.3"
    // https://github.com/mikepenz/Materialize
    api 'com.mikepenz:materialize:1.2.0'
    //Image Picker
    implementation 'com.kbeanie:multipicker:1.6@aar'
    //Welcome Activity
    implementation 'com.stephentuso:welcome:1.4.1'
    // Butterknife
    implementation 'com.jakewharton:butterknife:10.1.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:10.1.0'
    // Custom Activity on Crash
    implementation 'cat.ereza:customactivityoncrash:2.2.0'

    // Piracy Checker
    implementation 'com.github.javiersantos:PiracyChecker:1.2.5'
    //Kotlin
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version") {
        transitive = true
        exclude group: 'org.jetbrains', module: 'annotations'
    }
    // Color Picker
    implementation 'com.jaredrummler:colorpicker:1.0.2'
    // APK Signer
    implementation 'com.android.tools.build:apksig:3.5.3'
    // Material seekbar
    implementation 'com.pavelsikun:material-seekbar-preference:2.3.0'

    // Apktool
    implementation project(":decompiler")
}

repositories {
    mavenCentral()
}
